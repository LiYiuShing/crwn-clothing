{"ast":null,"code":"import _objectSpread from \"/Users/liyiushing/crwn-clothing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport { resolve } from 'path'; //documentRef.XXXX() -> set, get, update, delete\n\nconst config = {\n  apiKey: \"AIzaSyAR9yHedFgoSjo_RsTLSpHRHQdOXSet3bE\",\n  authDomain: \"crwn-db-b40c1.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-b40c1.firebaseio.com\",\n  projectId: \"crwn-db-b40c1\",\n  storageBucket: \"crwn-db-b40c1.appspot.com\",\n  messagingSenderId: \"1070936331277\",\n  appId: \"1:1070936331277:web:8a21f7f10a19b6b8707144\",\n  measurementId: \"G-WCCBLQJ0E1\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`); //const collectionRef = firestore.collection('users');\n\n  const snapShot = await userRef.get(); //const collectionSnapshot = await collectionRef.get();\n\n  if (!snapShot.exists) {\n    const displayName = userAuth.displayName,\n          email = userAuth.email;\n    const createdAt = new Date();\n\n    try {\n      //create user\n      await userRef.set(_objectSpread({\n        displayName,\n        email,\n        createdAt\n      }, additionalData));\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nfirebase.initializeApp(config);\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc(obj.title);\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n}; //Mapping Firebase collection\n\nexport const convertCollectionsSnapshotToMap = collectionsSnapshot => {\n  const transformedCollection = collectionsSnapshot.docs.map(docSnapshot => {\n    const _docSnapshot$data = docSnapshot.data(),\n          title = _docSnapshot$data.title,\n          items = _docSnapshot$data.items;\n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: docSnapshot.id,\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["/Users/liyiushing/crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","resolve","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","initializeApp","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","title","commit","convertCollectionsSnapshotToMap","collectionsSnapshot","transformedCollection","docs","map","docSnapshot","data","items","routeName","encodeURI","toLowerCase","id","reduce","accumulator","getCurrentUser","Promise","reject","unsubscribe","auth","onAuthStateChanged","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport { resolve } from 'path';\n\n//documentRef.XXXX() -> set, get, update, delete\n\nconst config = {\n    apiKey: \"AIzaSyAR9yHedFgoSjo_RsTLSpHRHQdOXSet3bE\",\n    authDomain: \"crwn-db-b40c1.firebaseapp.com\",\n    databaseURL: \"https://crwn-db-b40c1.firebaseio.com\",\n    projectId: \"crwn-db-b40c1\",\n    storageBucket: \"crwn-db-b40c1.appspot.com\",\n    messagingSenderId: \"1070936331277\",\n    appId: \"1:1070936331277:web:8a21f7f10a19b6b8707144\",\n    measurementId: \"G-WCCBLQJ0E1\"\n};\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n    if (!userAuth) return;\n\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\n    //const collectionRef = firestore.collection('users');\n\n    const snapShot = await userRef.get();\n    //const collectionSnapshot = await collectionRef.get();\n\n    if(!snapShot.exists) {\n        const { displayName, email } = userAuth;\n        const createdAt = new Date();\n\n        try {\n            //create user\n            await userRef.set({\n                displayName,\n                email,\n                createdAt,\n                ...additionalData\n            })\n        } catch (error) {\n            console.log('error creating user', error.message );\n        }\n    }\n\n    return userRef;\n}\n\nfirebase.initializeApp(config);\n\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n    const collectionRef = firestore.collection(collectionKey);\n\n    const batch = firestore.batch();\n    objectsToAdd.forEach(obj => {\n        const newDocRef = collectionRef.doc(obj.title);\n        batch.set(newDocRef, obj);\n    });\n\n    return await batch.commit()\n};\n\n//Mapping Firebase collection\nexport const convertCollectionsSnapshotToMap = collectionsSnapshot => {\n    const transformedCollection = collectionsSnapshot.docs.map(docSnapshot => {\n        const { title, items } = docSnapshot.data();\n\n        return {\n            routeName: encodeURI(title.toLowerCase()),\n            id: docSnapshot.id,\n            title,\n            items\n        };\n    });\n\n    return transformedCollection.reduce((accumulator, collection) => {\n        accumulator[collection.title.toLowerCase()] = collection;\n        return accumulator;\n    }, {});\n};\n\nexport const getCurrentUser = () => {\n    return new Promise((resolve, reject) => {\n        const unsubscribe = auth.onAuthStateChanged(userAuth => {\n            unsubscribe();\n            resolve(userAuth);\n        }, reject)\n    })\n}\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({ prompt: 'select_account' });\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}